//
//  DetailInteractor.swift
//  marvel-challenge
//
//  Created by Danilo Henrique on 14/07/20.
//  Copyright (c) 2020 danilo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailBusinessLogic {
    func requestCharacter()
    func requestImage()
    func saveCharacterInFavorite()
    func removeCharacterFromFavorite()
}

protocol DetailDataStore {
    var character: CharacterModel? { get set }
}

class DetailInteractor: DetailBusinessLogic, DetailDataStore {
    
    var presenter: DetailPresentationLogic?
    var worker = DetailWorker()
    
    // MARK: Data Store
    
    var character: CharacterModel?
    
    // MARK: Business Logic
    
    func requestCharacter() {
        guard
            let character = character,
            let id = character.id
        else {
            presenter?.presentError(.unexpectedError)
            return
        }
        
        worker.getFavoriteCharacter(withId: id) { (result) in
            switch result {
            case .success(let favoritesCharacter):
                let response = Detail.Character.Response(character: character, favoriteCharacter: favoritesCharacter.first)
                presenter?.presentCharacter(response: response)
            case .failure:
                presenter?.presentError(.database)
            }
        }
    }
    func requestImage() {
        guard
            let path = character?.thumbnail?.path,
            let extensionType = character?.thumbnail?.extension,
            let url = URL(string: path + "." + extensionType)
        else {
            presenter?.presentError(.unexpectedError)
            return
        }
        
        worker.requestImage(fromURL: url) { [weak self] (result) in
            guard let self = self else { return }
            
            switch result {
            case .success(let image):
                let response = Detail.GetImage.Response(image: image)
                self.presenter?.presentImage(response: response)
            case .failure:
                self.presenter?.presentError(.unexpectedError)
            }
        }
    }
    
    func saveCharacterInFavorite() {
        guard let name = character?.name, let id = character?.id else {
            self.presenter?.presentError(.unexpectedError)
            return
        }
        
        worker.saveCharacterOnFavorite(name: name, id: id) { [weak self] (error) in
            guard let self = self else { return }
            if error != nil {
                self.presenter?.presentError(.database)
            }
        }
    }
    
    func removeCharacterFromFavorite() {
        guard let id = character?.id else {
            presenter?.presentError(.unexpectedError)
            return
        }
        
        worker.removeCharacterFromFavorite(id: id) { (error) in
            if error != nil {
                presenter?.presentError(.database)
            }
        }
    }
}
