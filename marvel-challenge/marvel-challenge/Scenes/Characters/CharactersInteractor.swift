//
//  CharactersInteractor.swift
//  marvel-challenge
//
//  Created by Danilo Henrique on 11/07/20.
//  Copyright (c) 2020 danilo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharactersBusinessLogic {
    func requestCharacters()
    func getUpdatedFavorites()
    func searchCharacters(request: Characters.SearchCharacters.Request)
    func saveCharacterInFavorite(request: Characters.SaveInFavorite.Request)
}

protocol CharactersDataStore {
    var charactersBeingDisplayed: [CharacterModel] { get }
}

class CharactersInteractor: CharactersDataStore {
    
    var presenter: CharactersPresentationLogic?
    var worker = CharactersWorker(manager: CharactersNetworkManager())
    
    // MARK: Data Store
    
    var charactersBeingDisplayed: [CharacterModel] {
        if isSearching {
            return searchedCharacters
        } else {
            return allCharacters
        }
    }
    
    // MARK: Variables
    
    var favorites: [FavoriteCharacterEntity] = []
    var allCharacters: [CharacterModel] = []
    var searchedCharacters: [CharacterModel] = []
    
    // MARK: Computed Propierties
    
    var isSearching: Bool { !searchedCharacters.isEmpty }
    
    // MARK: Private Functions
    
    private func searchCharacters(_ characters: [CharacterModel], with text: String) -> [CharacterModel] {
        let options: String.CompareOptions = [.caseInsensitive, .diacriticInsensitive]
        let searchedCharacters = characters.filter { (character) -> Bool in
            return character.name?.range(of: text, options: options) != nil
        }
        return searchedCharacters
    }
    
    private func successRequestCharacters(characterDataWrapper: CharacterDataWrapperModel) {
        guard let results = characterDataWrapper.data?.results, !results.isEmpty else {
            presenter?.presentError(.emptyList)
            return
        }
        allCharacters = results
        getFavorites()
        let response = Characters.GetCharacters.Response(results: results, favorites: favorites)
        self.presenter?.presentCharacters(response: response)
    }
    
    private func getFavorites() {
        worker.getFavoriteCharacters { [weak self] (result) in
            guard let self = self else { return }
            
            switch result {
            case .success(let favorites):
                self.favorites = favorites
            case .failure:
                self.presenter?.presentError(.databaseError)
            }
        }
    }
}

// MARK: Business Logic

extension CharactersInteractor : CharactersBusinessLogic {
    func requestCharacters() {
        worker.getCharacters(completion: { [weak self] (result) in
            guard let self = self else { return }
            
            switch result {
            case .success(let characterDataWrapper):
                self.successRequestCharacters(characterDataWrapper: characterDataWrapper)
            case .failure:
                self.presenter?.presentError(.unexpectedError)
            }
        })
    }
    
    func searchCharacters(request: Characters.SearchCharacters.Request) {
        if request.searchText.isEmpty {
            searchedCharacters = []
        } else {
            searchedCharacters = searchCharacters(allCharacters, with: request.searchText)
        }
        
        let response = Characters.GetCharacters.Response(results: charactersBeingDisplayed, favorites: favorites)
        presenter?.presentCharacters(response: response)
    }
    
    func getUpdatedFavorites() {
        getFavorites()
        let response = Characters.GetCharacters.Response(results: charactersBeingDisplayed, favorites: favorites)
        presenter?.presentCharacters(response: response)
    }
    
    func saveCharacterInFavorite(request: Characters.SaveInFavorite.Request) {
        let charactedSelected = charactersBeingDisplayed[request.indexPath.row]
        guard let name = charactedSelected.name, let id = charactedSelected.id else { return }
        
        worker.saveCharacterOnFavorite(name: name, id: id, image: UIImage()) { (error) in
            if error != nil {
                presenter?.presentError(.databaseError)
            }
        }
    }
}
