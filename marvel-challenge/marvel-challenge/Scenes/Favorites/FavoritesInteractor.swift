//
//  FavoritesInteractor.swift
//  marvel-challenge
//
//  Created by Danilo Henrique on 11/07/20.
//  Copyright (c) 2020 danilo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoritesBusinessLogic {
    func requestFavorites()
    func removeFromDatabase(request: Favorites.RemoveFromDatabase.Request)
}

protocol FavoritesDataStore {
    //var name: String { get set }
}

class FavoritesInteractor: FavoritesBusinessLogic, FavoritesDataStore {
    
    var presenter: FavoritesPresentationLogic?
    var worker: FavoritesWorker? = FavoritesWorker()
    
    // MARK: Variables
    
    var favorites: [FavoriteCharacterEntity] = []
    
    // MARK: Business Logic
    
    func requestFavorites() {
        worker?.getFavoriteCharacters { [weak self] (result) in
            guard let self = self else { return }
            
            switch result {
            case .success(let favorites):
                handleFavoritesSuccess(favorites: favorites)
            case .failure:
                self.presenter?.presentError(.database)
            }
        }
    }
    
    func removeFromDatabase(request: Favorites.RemoveFromDatabase.Request) {
        let id = Int(favorites[request.indexPath.row].id)
        worker?.removeCharacterFromFavorite(id: id, completion: { [weak self] (error) in
            guard let self = self else { return }
            if error != nil {
                self.presenter?.presentError(.database)
            } else {
                favorites.remove(at: request.indexPath.row)
                if favorites.isEmpty {
                    presenter?.presentError(.emptyList)
                }
                let response = Favorites.RemoveFromDatabase.Response(indexPath: request.indexPath)
                self.presenter?.presentRemoveFromDatabase(response: response)
            }
        })
    }
    
    // MARK: Private Functions
    
    private func handleFavoritesSuccess(favorites: [FavoriteCharacterEntity]) {
        self.favorites = favorites
        if favorites.isEmpty {
            presenter?.presentError(.emptyList)
        } else {
            let response = Favorites.GetFavorites.Response(favorites: favorites)
            presenter?.presentFavorites(response: response)
        }
    }
}
